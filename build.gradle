buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
		maven {
			url = "https://jitpack.io"
		}
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.+'
    }
}



apply plugin: 'net.minecraftforge.gradle'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft.version}-${config.computronics.version}"
def asielib_version = "${config.minecraft.version}-${config.asielib.version}"
group = "pl.asie.computronics" // https://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Computronics"

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

minecraft {

    
	mappings channel: 'stable', version: '39-1.12'
	

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    maven {
        name = "OC repo"
        url = "https://maven.cil.li"
    }
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url "https://repo.elytradev.com"
    }

    maven { url = "https://maven.tterrag.com" } // AutoSave

}

/*configurations {
	embedded
    implementation.extendsFrom embedded
}*/

dependencies {
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2860"
    
    compileOnly "li.cil.oc:OpenComputers:${config.oc.version}"
    //deobfCompile "net.industrial-craft:industrialcraft-2:${config.ic2.version}:dev"
	//compileOnly "com.gregoriust.gregtech:gregtech_1.7.10:${config.gregtech.version}:dev"
	//compileOnly "com.gregoriust.gregtech:gregtech_1.7.10:${config.gregtech6.version}:dev"

    //compileOnly "com.gregoriust.gregtech:gregtech_1.7.10:${config.gregtech.version}:dev"
    //compileOnly "mcp.mobius.waila:Waila:${config.waila.version}"

    //deobfCompile "charset-lib:Charset:Lib:${config.charset.version}"
    //deobfCompile "charset-audio:Charset:Audio:${config.charset.version}"
    //deobfCompile "simplelogic-wires:SimpleLogic:Wires:${config.simplelogic.version}"
	implementation "info.loenwind.autoconfig:AutoConfig:${config.minecraft.version}-${config.autoconfig.version}"
    implementation "info.loenwind.autosave:AutoSave:${config.minecraft.version}-${config.autosave.version}"


    //compile name: "buildcraft", version: "${config.buildcraft.version}", classifier: "dev"
    //deobfCompile name: "Conventional", version: "${config.cv.version}"
    /*compile("appeng:appliedenergistics2:${config.ae2.version}:dev") {
        transitive = false
    }*/
    /*compile("riskyken.armourersWorkshop:Armourers-Workshop:1.7.10-${config.am.version}:deobf"){
        transitive = false
    }*/
    //compileOnly("com.bluepowermod:BluePower:${config.bluepower.version}:deobf") {
    //	transitive = false
    //}
    //compileOnly("qmunity:QmunityLib:${config.qmunitylib.version}:deobf") {
    //	transitive = false
    //}
    compileOnly "com.elytradev:mirage:${config.mirage.version}"
    compileOnly fileTree(dir: "libs", includes: ['*.jar', '*.zip'])
}



sourceSets {
    main {
        output.resourcesDir = 'build/classes/java/main'
        java {
            exclude "pl/asie/computronics/client/**"
            exclude "pl/asie/computronics/integration/appeng/**"
            exclude "pl/asie/computronics/integration/armourersworkshop/**"
            exclude "pl/asie/computronics/integration/betterstorage/**"
            exclude "pl/asie/computronics/integration/buildcraft/**"
            exclude "pl/asie/computronics/integration/buildcraft/pluggable/**"
            //exclude "pl/asie/computronics/integration/charset/**"
            //exclude "pl/asie/computronics/integration/charset/wires/**"
            exclude "pl/asie/computronics/integration/cofh/**"
            exclude "pl/asie/computronics/integration/draconicevolution/**"
            //exclude "pl/asie/computronics/integration/enderio/**"
            exclude "pl/asie/computronics/integration/factorization/**"
            //exclude "pl/asie/computronics/integration/forestry/**"
            exclude "pl/asie/computronics/integration/fsp/**"
            exclude "pl/asie/computronics/integration/gregtech/**"
            exclude "pl/asie/computronics/integration/mekanism/**"
            exclude "pl/asie/computronics/integration/mfr/**"
            //exclude "pl/asie/computronics/integration/railcraft/**"
            exclude "pl/asie/computronics/integration/redlogic/**"
            //exclude "pl/asie/computronics/integration/storagedrawers/**"
            //exclude "pl/asie/computronics/integration/info/**"

            exclude "pl/asie/lib/integration/buildcraft/*"
            exclude "pl/asie/lib/integration/tool/appeng/**"
            exclude "pl/asie/lib/integration/tool/cofh/**"
            exclude "pl/asie/lib/integration/tool/mekanism/**"
            exclude "pl/asie/lib/integration/tool/buildcraft/**"
            //exclude "pl/asie/lib/integration/tool/enderio/**"
        }
    }
}

jar {
	//exclude 'cofh/**'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

apply plugin: 'idea'
idea {
    module {
        //scopes.PROVIDED.plus += [configurations.provided]
		//scopes.PROVIDED.plus += [configurations.provided2]
        outputDir = file('build/classes/java/main')
    }
}

processResources
        {
		duplicatesStrategy(DuplicatesStrategy.INCLUDE)
            inputs.property "version", project.version
            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': '1.12.2', 'asielib_version': asielib_version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

//For Building

def libDir = './build/libs'

task deobfJar(type: Jar) {
	description = 'Creates a jar file containing the non-obfuscated class files'
	classifier = 'deobf'
	destinationDir = file(libDir)
	from sourceSets.main.output.classesDirs
	exclude 'cofh/**'
}

task apiZip(type: Zip) {
    description = 'Creates a zip file containing the API source files only'
    classifier = 'api'
    destinationDir = file(libDir)
    from sourceSets.main.allSource
    include 'pl/asie/**/api/**'
}

task makeJars {
	description = 'Creates the mod files'
}

makeJars.dependsOn clean, build, deobfJar, apiZip
build.shouldRunAfter clean
deobfJar.shouldRunAfter build
apiZip.shouldRunAfter deobfJar
